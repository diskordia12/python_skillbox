"""
Задача 1. Зоопарк
В маленьком зоопарке каждое животное сидит в отдельной клетке, всего этих животных четверо:
лев, кенгуру, слон и обезьяна. В базе данных они хранятся в виде вот такого списка:
zoo = ['lion', 'kangaroo', 'elephant', 'monkey']
Сегодня в зоопарк завезли медведя (bear) и посадили его между львом и кенгуру.
В итоге животных стало пять. А через неделю слона перевезли в другое место
и в списке снова стало четверо животных.
Реализуйте эти действия в коде программы и выведите в консоль итоговый список животных,
а также покажите, в какой клетке сидят лев и обезьяна. Для этого используйте методы списков.

Результат работы программы:
> Зоопарк: ['lion', 'bear', 'kangaroo', 'monkey']
> Лев сидит в клетке номер 1
> Обезьяна сидит в клетке номер 4
"""

# zoo = ['lion', 'kangaroo', 'elephant', 'monkey']
# bear_place = zoo.index('lion') + 1
# zoo.insert(bear_place, 'bear')
# zoo.remove('elephant')
# print(f'Lion seat in {zoo.index("lion") + 1} cage')
# print(f'Monkey seat in {zoo.index("monkey") + 1} cage')

"""
Задача 2. Сокращения
В одной компании наступили «тёмные времена», и сотрудников стали сокращать.
Зарплаты сотрудников хранятся в списке из N этих самых зарплат.
Зарплаты уже уволенных сотрудников обозначаются в списке числом 0.
Напишите программу, которая запрашивает у пользователя количество сотрудников и их зарплаты,
затем удаляет все элементы списка со значением 0 и выводит в консоль,
сколько сотрудников осталось, а также их зарплаты. Дополнительный список использовать нельзя. 

Пример:
> Кол-во сотрудников: 7
> Зарплата 1 сотрудника: 10000
> Зарплата 2 сотрудника: 25000
> Зарплата 3 сотрудника: 0
> Зарплата 4 сотрудника: 50000
> Зарплата 5 сотрудника: 60000
> Зарплата 6 сотрудника: 0
> Зарплата 7 сотрудника: 17000
> Осталось сотрудников: 5
> Зарплаты: [10000, 25000, 50000, 60000, 17000]

Дополнительно: выведите на экран максимальную и минимальную зарплату оставшихся сотрудников.
Пример:
Максимальная зп: 60000
Минимальная зп: 10000
"""

# amount_empl = int(input('Enter amount of employees: '))
# salary = [int(input(f'Salary {i + 1} employee: ')) for i in range(amount_empl)]
# for emp in salary:
#     if emp == 0:
#         salary.remove(emp)
#
# print(f'Las employees: {len(salary)}')
# print(f'Salary: {salary}')
# print(f'Max salary: {max(salary)}')
# print(f'Min salary: {min(salary)}')

"""

Задача 3. Кино
Мы поддерживаем свой киносайт и хотим сделать так, чтобы пользователи после регистрации
могли создать собственный рейтинг фильмов из тех, которые есть на сайте.
Вот сам список фильмов (конечно же, можете брать свои):

films = [
    'Крепкий орешек', 'Назад в будущее', 'Таксист', 
    'Леон', 'Богемская рапсодия', 'Город грехов',
    'Мементо', 'Отступники', 'Деревня', 
    'Проклятый остров', 'Начало', 'Матрица'
]

Напишите программу, которая позволяет добавлять в свой рейтинг фильмы, удалять их оттуда,
а также вставлять на нужное пользователю место.
Обеспечьте контроль ввода и сделайте так, чтобы в список нельзя было
добавить один и тот же фильм несколько раз.

Пример:
> Ваш текущий топ фильмов: []
> Название фильма: Леон
> Команды: добавить, вставить, удалить
> Введите команду: добавить

> Ваш текущий топ фильмов: [‘Леон’]
> Название фильма: Леон
> Команды: добавить, вставить, удалить
> Введите команду: добавить
> Этот фильм уже есть в вашем списке.

> Ваш текущий топ фильмов: [‘Леон’]
> Название фильма: Матрица
> Команды: добавить, вставить, удалить
> Введите команду: добавить

> Ваш текущий топ фильмов: [‘Леон’, ‘Матрица’]
> Название фильма: Леон
> Команды: добавить, вставить, удалить
> Введите команду: удалить

> Ваш текущий топ фильмов: [‘Матрица’]
> Название фильма: …..
"""
# films = [
#     'Крепкий орешек', 'Назад в будущее', 'Таксист',
#     'Леон', 'Богемская рапсодия', 'Город грехов',
#     'Мементо', 'Отступники', 'Деревня',
#     'Проклятый остров', 'Начало', 'Матрица'
# ]
#
# user_films = list()
#
#
# while True:
#     print(f'You current favorite list of films:\n{user_films}')
#
#     try:
#         name = input('Type name of film: ')
#
#         if name not in films:
#             raise ValueError('We don\'t have this film on our website =(')
#     except ValueError as e:
#         print(f'Error: {e}')
#         continue
#
#     command = input('Enter your command: add, put on, remove\n-')
#     if command == 'add':
#         if name in user_films:
#             print('You already have this film in your list')
#         elif name in films:
#             user_films.append(name)
#     elif command == 'put on':
#         film_place = int(input('What place for new film: '))
#         films %= len(user_films)
#         if name in user_films:
#             user_films.remove(name)
#         user_films.insert(film_place - 1, name)
#     elif command == 'remove':
#         user_films.remove(name)
#     else:
#         raise ValueError('You entered the wrong command')


"""
Задача 1. Задачи компаний
Одна IT-компания решила расшириться и взяла под своё крыло ещё три таких же, но поменьше.
Конечно же, все выполненные и невыполненные задачи этих компаний перетекли в основную компанию.
Даны четыре списка компаний, в которых для каждой задачи написано, выполнена (1) она или нет (0):
main = [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1]
first_company = [0, 0, 0]
second_company = [1, 0, 0, 1, 1]
third_company = [1, 1, 1, 0, 1]

Напишите программу, которая расширяет список main элементами остальных списков,
выведите итоговый список, а также выведите количество невыполненных задач.
Результат работы программы:
> Общий список задач: [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1]
> Кол-во невыполненных задач: 10
"""

# main_company = [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1]
# first_company = [0, 0, 0]
# second_company = [1, 0, 0, 1, 1]
# third_company = [1, 1, 1, 0, 1]
#
# main_company.extend(first_company)
# main_company.extend(second_company)
# main_company.extend(third_company)
# print(f'Commom list of tasks:\n{main_company}')
# print(f'Amount of unfulfilled tasks: {main_company.count(0)}')

"""
Задача 2. Вредоносное ПО
Гера решил попрактиковаться в программировании и захотел написать небольшой скрипт,
который после двух сообщений отправляет ещё одно на основе первых двух.
Пользователь вводит две строки. В каждой из них есть какое-то количество специальных символов ! и ?.
Напишите программу, которая считает количество этих символов отдельно в первой строке
и отдельно во второй. Если в первой строке их больше, чем во второй,
то на экран выводится первая строчка, объединённая со второй, а иначе — вторая с первой.
При равном количестве символов в строках выводится «Ой».

Пример 1:
> Первое сообщение: Привет!
> Второе сообщение: Как дела? Что делаешь?
> Третье сообщение: Как дела? Что делаешь? Привет!
 
Пример 2:
> Первое сообщение: Хм!!
> Второе сообщение: ?
> Третье сообщение: Хм!!?
"""
#
# while True:
#     first_message = input('The first message: ')
#     second_message = input('The first message: ')
#     spec_sym_first = first_message.count('?') + first_message.count('!')
#     spec_sym_second = second_message.count('?') + second_message.count('!')
#
#     if spec_sym_first > spec_sym_second:
#         third_message = first_message + second_message
#     elif spec_sym_second > spec_sym_first:
#         third_message = second_message + ' ' + first_message
#     else:
#         third_message = 'Ouch'
#
#     print(f'The third message: {third_message}')
#     first_message = ''
#     second_message = ''

"""
Задача 3. Пакеты
При работе с сервером мы кодируем сообщение и отправляем его в виде пакетов информации.
Их количество равно N. Допустим, каждый пакет содержит четыре числа, каждое из которых
равно нулю или единице. Эти числа называются битами.
Иногда в кодировке сообщения встречаются ошибки, и в пакете эта ошибка обозначается числом -1.
Если таких ошибок не больше одной, то этот пакет мы целиком добавляем в список для декодирования,
а иначе отбрасываем.
Напишите программу, которая будет обрабатывать полученные пакеты и
выведет на экран итоговое сообщение для декодирования,
а также количество ошибок в нём и количество необработанных пакетов.

Пример:
> Кол-во пакетов: 3

> Пакет номер 1
> 1 бит: 1
> 2 бит: 0
> 3 бит: -1
> 4 бит: 1

> Пакет номер 2
> 1 бит: -1
> 2 бит: -1
> 3 бит: 1
> 4 бит: 1
> Много ошибок в пакете.

> Пакет номер 3
> 1 бит: 0
> 2 бит: 1
> 3 бит: 1
> 4 бит: 1

> Полученное сообщение: [1, 0, -1, 1, 0, 1, 1, 1]
> Кол-во ошибок в сообщении: 1
> Кол-во потерянных пакетов: 1
"""

# pack_amount = int(input('Amount of packages: '))
# pack = list()
# decode = list()
# bad_pack = 0
#
# for i_pack in range(pack_amount):
#     print(f'\n{i_pack + 1} package')
#     for j_bit in range(4):
#         pack.append(int(input(f'{j_bit + 1} bit: ')))
#
#     if pack.count(-1) <= 1:
#         decode.extend(pack)
#     else:
#         print('Too many errors in the package')
#         bad_pack += 1
#
#     pack = []
#
# print(f'Received message: {decode}')
# print(f'Errors in message: {decode.count(-1)}')
# print(f'Lost packets: {bad_pack}')

"""
Задача 1. Матрица
Дан вот такой список со списками:
matrix = [[1, 2 ,3], [4, 5, 6], [7, 8, 9]]
Реализуйте программу, которая выводит элементы этого списка в виде привычной нам матрицы.
Результат работы программы:
1 2 3
4 5 6
7 8 9
"""

# matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
#
# for row in matrix:
#     for elem in row:
#         print(elem, end=' ')
#     print()

"""
Задача 2. Олимпиада
В олимпиаде по программированию участвует N человек, в списке участников они обозначаются
под номерами 1, 2, 3, 4 и так далее до N. Эти участники поделены на команды по K человек.
Напишите программу, которая принимает на вход количество участников и количество человек
в каждой команде, затем генерирует список таких команд и выводит его на экран. 
Обеспечьте контроль ввода: в каждой команде должно быть ровно по K человек.

Пример 1:
> Кол-во участников: 12
> Кол-во человек в команде: 4
> Общий список команд: [[1, 2 ,3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]

Пример 2:
> Кол-во участников: 12
> Кол-во человек в команде: 5
> 12 участников невозможно поделить на команды по 5 человек!
"""
# while True:
#     participants_amount = int(input('Numbers of participants: '))
#     people_in_team = int(input('People in each team: '))
#     try:
#         if participants_amount % people_in_team != 0:
#             raise ValueError(f'{participants_amount} impossible put in {people_in_team}-people teams!')
#     except ValueError as e:
#         print(f'Error: {e}')
#         continue
#
#     teams = list()
#     teams_amount = participants_amount // people_in_team
#     num = 1
#     for _ in range(teams_amount):
#         teams.append(list(range(num, num + people_in_team)))
#         num += people_in_team
#
#     print(f'List of teams: {teams}')

"""
Задача 3. Лавка
В небольшой фруктовой лавке у каждого фрукта есть название и цена.
Эта информация хранится в одном большом списке, вот так:
goods = [["яблоки", 50], ["апельсины", 190], ["груши", 100], ["нектарины", 200], ["бананы", 77]]
Недавно в лавку привезли новый fruit_name по цене price, а после этого случилось ужасное:
повысили налоги. А значит, повысились и цены на фрукты, на целых 8%!
Реализуйте код, который добавляет в список goods ещё один список с новым фруктом и ценой
(это запрашивается у пользователя), а затем увеличивает цены всех фруктов на 8%.

Пример:
Текущий ассортимент: [["яблоки", 50], ["апельсины", 190], ["груши", 100],
                        ["нектарины", 200], ["бананы", 77]]
Новый фрукт: абрикосы
Цена: 150

Новый ассортимент: [["яблоки", 50], ["апельсины", 190], ["груши", 100],
                    ["нектарины", 200], ["бананы", 77], ["абрикосы", 150]]

Новый ассортимент с увел. ценой: [['яблоки', 54.0], ['апельсины', 205.2], ['груши', 108.0],
                                ['нектарины', 216.0], ['бананы', 83.16], ['абрикосы', 162.0]]
"""

fruits = [
            ["яблоки", 50], ["апельсины", 190], ["груши", 100],
            ["нектарины", 200], ["бананы", 77]
            ]

new_fruit = input('New fruit: ')
price = int(input(f'Price of {new_fruit}: '))

fruits.append([new_fruit, price])
print(f'New positions: {fruits}')

for fruit in fruits:
    # fruits[fruit][1] += fruits[fruit][1] * 8 / 100
    fruit[1] = round(fruit[1] * 1.08, 2)

print(f'\nNew position with additional price: {fruits}')